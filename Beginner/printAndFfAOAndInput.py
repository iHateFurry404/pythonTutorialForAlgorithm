# print함수는 말 그대로 문자열을 출력해주는 함수이다.
print('Hello World!') # 말을 덧붙이자면, '말고 "로 해도 된다. 그냥 개발자의 취향 차이이다.
print("""Hello
World""") # 이렇게 한다면 줄이 나눠서 나오는데, 줄나누기(엔터키)를 하기 전 \를 넣고 한다면 합쳐져서 출력된다. 그리고 당연히 '''로 해도 된다.
a = 0
print(f'{a} {1 + 1}') # 이런식으로 '(혹은 ")을 입력하기 전에 f를 넣고 {}를 넣어 변수명 혹은 식을 넣는다면 그것이 출력된다.
print('{} {}'.format(a, 1 + 1)) # 이렇게 쓰기도 한다.
print('{v1} {v2}'.format(v1 = a, v2 = 1 + 1)) # 진짜 가다 간혹 이렇게 쓰는 사람도 있는데, 이렇게 써도 되기는 하다. 참고로 저기 안에 들어가는 영어를 뒤에 format안에 쓸때는 순서 상관이없다.
# 그리고 추가하는데, 무조건 v1이 바깥에서도 쓰였다고 해서 {v1}써두고 format 안에서 v1만 쓰면 오류가 생긴다.
print(a, 1 + 1) # "나 '를 안쓰고 이렇게 써도 된다. 참고로 ,로 저렇게 쓴다면 "0 2"가 나오는데, ,는 변수명 혹은 식 사이에 띄어쓰기를 해준다.
print(str(a) + ' ' + str(1 + 1)) # +로 써도 된다. 하지만 띄어쓰기는 해주지 않고, 변수의 자료형이 string이 아니라면 str로 캐스팅(강제 형(形)변환)해야한다.
print('%d %d' % (a, 1 + 1)) # 이렇게도 쓰기도 한다. 그렇지만 사용하려는 변수명의 자료형을 맞춰서 써야하기에(암기해야하기에) 추천하지는 않는다.
print('%.4f', 1.23456) # 4라고 적었으니 소수점 4자리 수까지만 출력된다.
print('{0:.4f}'.format(1.23456)) # 4라고 적었으니 소수점 4자리 수까지만 출력된다.
print(f'{1.23456.4f}') # 4라고 적었으니 소수점 4자리 수까지만 출력된다.
# 이스케이프 문자를 정리한 코드이다.
"""
\n : 줄나누기를 한다. 예: print('hello\nworld')
\t : 탭키를 누르는 것과 같은 효과를 낸다.
\b : 백스페이스키를 누른것과 같은 효과를 낸다.
\\ : \를 쓸수 있게 한다.
\' : 문자열에서 ''를 쓰고 있을때 '를 나타낼수 있는 방법이다. 근데 다른 방법으론 ''''''를 쓰는 방법이 있다.
\" : 문자열에서 ""를 쓰고 있을때 "를 나타낼수 있는 방법이다. 근데 다른 방법으론 """"""를 쓰는 방법이 있다.
\(숫자) : 숫자에 8진수 숫자로 ASCII 코드로 나타낸다. 예: \141 = 'a'
\x(숫자) : 위의 것과 다르게 16진수로 적용한다. 예 : \x61 = 'a'
참고로 ASCII 코드는 https://www.asciitable.com를 참고해봐라.
\N{문자} : 문자에 문자 이름을 지정하여 유니코드의 문자로 표현한다. 파이썬 3.3이상에서만 쓸수 있으며 예로 \N{LINE FEED}는 \n를 나타낸다 한다. 테이블은 http://www.unicode.org/Public/8.0.0/ucd/NameAliases.txt를 참고.
\u(숫자) : 숫자에 16비트 16진수 숫자를 지정하여 유니코드의 문자 표현한다. 예: \u0061 = 'a' https://en.wikipedia.org/wiki/List_of_Unicode_characters 이걸 참고해서 써라.
\U(숫자) : 위에 것과 다르게 32비트 16진수로 작동한다. 예: \U00000061 = a
\000 : 널 문자, 그냥 아무것도 아니지만 언젠간 쓸모가 있다.
\f, \r, \v, \a : 이것들은 실행해보고 알아보는걸 추천한다. 이것들은 자주 쓰는편은 아니다.

참고로 위 이스케이프 문자를 무시하고 싶다면
r''로 쓰면 고민 끝이다. 예: r'a\ra' = 'a\ra'
"""

# 간단한 부가 설명이다.
print('asdf', end = '') # 이렇게 쓴다면 asdf를 출력한 다음 개행을 안한다. 참고로 end 문자엔 대부분 무엇이든 들어가도 된다.
print('\n', str(a), (1 + 1), sep = '*') # 이렇게 쓴다면 변수 사이에 *가 끼게 된다. 문자에 들어갈수 있는건 위 end와 같다.
print(' apple'.lstrip()) # 아무것도 입력을 안했으니 왼쪽에 있는 공백을 제거 한다.
print('apple'.lstrip('ap')) # 왼쪽으로 a와 p 문자열의 모든 조합을 제거한다.
print('apple '.rstrip()) # 아무것도 입력을 안했으니 오른쪽에 있는 공백을 제거 한다.
print('apple'.rstrip('lep')) # 오른쪽으로 l, e와 p 문자열의 모든 조합을 제거한다.
print(' apple '.strip()) # 아무것도 입력을 안했으니 양쪽 공백 제거
print('apple'.strip('ae')) # 양쪽 끝에 a와 e의 문자열의 모든 조합을 제거한다.

# 아래 코드는 간단한 사칙연산을 하는 방법이다. 참고로 변수와 변수를 나누거나 더하거나 곱하거나 빼는등의 행동이 가능하다.
# 그리고 더 덧붙이자면 대부분의 띄어쓰기는 상관이 없다. 예: a=a+1
a = a + 1 # 간단한 더하기. 참고로 a += 1도 가능하다.
print(f'{a}')
a = a - 2 # 간단한 빼기. 참고로 a -= 2도 가능하다.
print(f'{a}')
a = a * 3 # 간단한 곱하기. 참고로 a *= 3도 가능하다.
print(f'{a}')
a = a ** 4 # 간단한 거듭제곱. 참고로 a **= 4도 가능하다.
print(f'{a}')
a = a / 5 # 간단한 나누기. 참고로 a /= 5도 가능하다.
print(f'{a}')
a = a // 6 #a / 6를 수행한 다음 그 몫을 출력한다.. 참고로 a //= 1도 가능하다.
print(f'{a}')
a = a % 7 # a / 7를 수행한 다음 그 나머지를 출력한다. 참고로 a %= 1도 가능하다.
print(f'{a}')

# 사용자에게 입력을 받아 변수를 설정할수도 있다.
b = input() # 입력받은 값을 b로 저장한다. 참고로 그냥 input을 쓴다면 모두 str변수로 저장한다. int로 받고싶다면 int(input())같은 식으로 캐스팅해야한다.
b = input('값을 입력하세요\n') # 이렇게 한다면 입력할때 옆에 input안에 들어간 문자를 출력하고 물어본다.
c, d = input().split() # c d에 각각 값을 저장한다. 예: 입력값 = '1 3' c = '1' d = '3', 참고로 c, d 말고도 c, d, e... 같이 더 늘려서 받을수도 있다.
# 참고로 split()을 사용할때 값을 충분히 입력하지 않는다면 문제가 생긴다. 그리고 값을 입력하고도 더 입력한다면 뒤에 있는것들은 다 무시한다.
# 또 참고로 lstrip, rstrip, strip같은 문자열 함수는 모두 사용 가능하다.
c, d = map(int, input().split()) # 이렇게 첫번째엔 변수의 형을, 두번째엔 input().split() 같은 명령어를 써 하는 사람이 있다. 그게 나다.
