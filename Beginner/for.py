a = [123, 456, 789, 987, 654, 321]
b = [[1, 2], [3, 4], [0.707107, '오리얄렐레']]

# 참고로 i를 안쓸 경우에는 _라고 쓰면 된다.
for i in a: # 전형적인 for문이다. for 뒤엔 값을 저장할 변수(여러개도 된다), 뒤엔 range()함수나 리스트, 튜플, 문자열이 온다. 
    # i라는 변수는 a의 요소를 점점 인덱스를 1씩 추가하면 그 인덱스의 리스트를 자신에게 대입한다.
    if i == a[-1]:
        print(f'[{i}]')
    else:
        print(f'[{i}],', end = ' ')

for one, two in b: # 이렇게 변수를 여러개 넣을 수있다.
    print(f'{one} {two}')

# range 함수를 이용해 몇번 반복할지 정할수있다.
for i in range(0, 10): # 첫 번째 값은 시작값(변수의 초기값, 시작값을 안쓰면 0으로 인식한다.), 두 번째 값은 끝나는 값인데, 둘을 a, b로 가정하면 a부터b - 1번 반복한다.
    # 즉, 1부터 10까지 반복하려면 range(1, 10 + 1)같은 식으로 써야 되는 것이다.
    # 세 번째 값에는 스텝으로, 뛰어 넘을 수를 설정할 수 있다. 예: range(0, 11, 2) = 0, 2, 4, 6, 8, 10. 참고로 기본 값은 1이다.
    print(f'{i}')

# 다중 for문은  for문 안에 for문을 쓸 수 있는 신기한 for문이다.
# 그것을 이용해 구구단을 하는 프로그램을 단 4줄만에 할 수 있다.
for i in range(1, 11): # 첫번째 for문
    for j in range(1, 11): # 두번째 for문
        print(f'{i * j}', end = ' ')
    print()

# continue문은 쓸때 아래에 있는 코드들은 무시하고 다시 돌아가게 할수있다.
for i in [1, 2, 3]:
    if not i % 2: # not i % 2? 이게 뭔뜻인가 하지만 i / 2의 나머지를 반환할때 i가 2의 배수일땐 0을 반환하기에 그 결괏값을 뒤집어 한 내 이상한 습관이다. 
        continue # 위 조건을 충족하면 아래에있는 print문을 무시하고 돌아간다.
    print(f'{i}')

# 아래는 리스트 컴프리헨션이라는 것을 설명한 것이다.
n = []
for i in range(1, 11): # 원래라면 1부터 10까지 리스트에 넣으려면 이렇게 해야한다.
    n.append(i)
print(f'{n}')

n = [i for i in range(1, 11)] # 이렇게 줄여 할수 있다!
# 해석하자면 for i in range(1, 11)을 하고, 앞에 있는 i는 i를 추가한다는 말이다. i 말고도 i * 3같은 값이 있어도 된다.
print(f'{n}')
# 아래 코드는 if문을 추가해 컴프리헨션 한 것이다.
n = [i for i in range(1, 10) if not i % 2]
# 조건부에 있는것이 만족해야 i를 추가한다.
print(f'{n}')
n = [[i, j] for i in ['1', '2', '3', '4'] for j in ['5', '6', '7', '8']] # 이렇게 중첩 for문도 쓸수있다.
print(f'{n}')
n = [i for i in range(1, 11) if i < 5 if not i % 2] # 이렇게 중첩으로 if문을 쓸수 있다. 당연하지만 두개 다 만족해야 i를 추가한다.
